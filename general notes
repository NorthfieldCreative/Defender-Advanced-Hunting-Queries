user activity is generally reported from the Microsoft Office and Defender for Endpoint tables.

Defender for Endpoint consists of the following 10 tables: DeviceEvents, DeviceFileCertificatelnfo, DeviceFileEvents, DevicelmageLoadEvents, Devicelnfo, DeviceLogonEvents, DeviceNetworkEvents, DeviceNetworklnfo, DeviceProcessEvents, and DeviceRegistryEvents.

if you have the Defender for 365 Data Connector enabled for Microsoft Sentinel and you enable the Microsoft Defender for Office 365 logs, the OfficeActivity table isn’t the only Microsoft Office data you can query. Enabling these logs gives you access to EmailEvents, EmailUrlInfo, EmailAttachmentInfo, and EmailPostDeliveryEvents tables

The "project" operator controls exactly what is shown in the results window


Also, Using Project-away you can effectively tell the query engine to
display ALL columns EXCEPT the one’s you list in the Project-away statement. Notice also that wildcards are
supported:

Tablename
| project-away column1, column2, column3*


Project-keep – Select what columns from the input to keep in the output. This Project variant is essentially the
default operation. Hint: Just use the standard Project option.

Project-rename – Renames columns in the result output. This option gives you the ability to rename column
headers during query-time. Don’t like a column name? Or, maybe your team has standardized on
Computer as a specific value for the Hostname column. This is how you can change the column name inthe results. Note that this does not change the data column name in the table – just in the query-time
results.


Tablename
| project-rename my_new_column_name = old_column_name
Project-reorder – Reorders columns in the result output. Most generally, the order of columns in the results
will be determined based on their original order in the table. But, alas, sometimes even that doesn’t hold
true. If you want to make sure to display the columns in a specific order without turning their fate over to
chance, use project-reorder.
Tablename
| project-reorder column2, column3, column1








the Distinct operator delivers results based on
a distinct combination of the columns you provide.

For example, if I have 100’s of computers stored in the table, each with their own combination of activity
and data, but I only want to know each computer name, I will supply a KQL query similar to the following:
SecurityEvent //the table
| distinct Computer //show distinct computer names








Unions
Union allows you to take the data from two or more tables and display the results (all rows from all tables)
together.

The following query merges the SecurityEvent and Heartbeat tables and then displays each hostname
(computer) stored in both tables and how many times each computer is recorded for some sort of activity.
SecurityEvent //the table
| union Heartbeat //merging SecurityEvent table with the Heartbeat table
| summarize count() by Computer //showing all computers from both tables and how many times


This next query example is the same as before but merges with an additional table (SecurityAlert) to show
the data from three tables instead of two.SecurityEvent //the table
| union Heartbeat, SecurityAlert //merging SecurityEvent table with the Heartbeat table and SecurityAlert
| summarize count() by Computer //showing all computers from all tables and how many times they are
referenced


The following example introduces a couple changes to the first two queries in that it merges all tables that
start with ‘Sec’ (notice the wildcard character) and sorts the computers in alphabetical ascending order (the
last line).
SecurityEvent //the table
| union Sec* //merging together all tables beginning with 'Sec'
| summarize count() by Computer //showing all computers from all tables and how many times they are
referenced
| sort by Computer asc //displaying Computer names in ascending order









Join, on the other hand, is intended to produce more
specific results by joining rows of just two tables through matching the values of columns
you specify.

Here’s something fun. To change the kind (or, flavor) of Join, you simply add a kind option like so.
| join kind=inner Heartbeat on Computer


This example joins together
the SecurityEvent and Heartbeat tables on the common Computer column. It then filters all Computers by
the 4688 Event ID (newly spawned process) and shows the Computer name and the installed OS and
versioning.SecurityEvent //table name
| join Heartbeat on Computer //joining SecurityEvent with Heartbeat on the common Computer column
| where EventID == "4688" //Looking for Event ID for new process
| project Computer, OSType, OSMajorVersion, Version //Displaying data from both tables











Show all columns in a table with "getschema"
example:
OfficeActivity
| getschema

Queries can be saved as "query packs"

Example query:
SecurityEvent // The table
| where TimeGenerated > ago(1h) // Activity in the last hour
| where EventID == 4624 // Successful logon
| where AccountType =~ "user" // case insensitive




Count operator:
On its own, just using the operator syntax listed above will show the exact number of rows in a given
table. For example, the following query shows how many rows exist in the SecurityEvent table.

SecurityEvent
| count

A more useful use:

SecurityEvent // The table
| where TimeGenerated > ago(1h) // Activity in the last hour
| where EventID == 4624 // Successful logon
| where AccountType =~ "user" // case insensitive
| count // Number of successful logons





The Summarize operator does just what it suggests – it summarizes data. In deeper terms, it produces a
table (in the results) that aggregates the content of the input table.

SecurityEvent // The input table
| where TimeGenerated > ago(1h) // Activity in the last hour
| where EventID == 4624 // Successful logon
| summarize count() by AccountType, Computer //Show the number of successful logons per computer and
what type of account is being used

OR, aggregation..
Tablename
| summarize Aggregation [by Group Expression]

•Simple aggregation functions: count(), sum(), avg(), min(), max(),
•Advanced aggregation functions: arg_min(), arg_max(), percentiles(), makelist(), countif()

•arg_min(), arg_max(): returns the extreme value
•percentiles(): returns the value at the percentile
•make_list(), make_set(): returns a list of all values/distinct values respectively


SecurityEvent //The table
| where TimeGenerated > ago(7d) //Looking at data in the last 7 days
| summarize count() by bin(TimeGenerated, 1d) //Using Bin to group the data by each day






One valuable operator provided with KQL to customize the data views is the Extend operator. The Extend
operator allows us to build custom columns in real-time in the query results. It allows you to create
calculated columns and append them to the results. Understand, though, that we’re not creating columns
of data that are stored back into the data table, but only generating a column of custom data based on
our current request.

Example:
SecurityEvent //the table
| extend ComputerNameLength = strlen(Computer) //creates a new column called ComputerNameLength of
the calculation of the number of characters of the computer name in the Computer column


SecurityEvent
| extend My_Calculation = 8*8
| extend My_Fabricated_Data = "Yay for me!"



OR.... project can be used similarly:

Perf //table name
| where CounterName == "Free Megabytes" //filtering data by 'free megabytes'
| project Computer, CounterName, FreeGB=CounterValue / 1024, FreeMB = CounterValue, FreeKB =
CounterValue * 1024 //only show these columns






///////////////////////////////
///     Visualizing data    ///
///////////////////////////////


Bar chart:

SecurityEvent //The table
| where TimeGenerated > ago(7d) //Looking at data in the last 7 days
| summarize count() by bin(TimeGenerated, 1d) //Using Bin to group the data by each day
| render barchart //Looking at the data in a Barchart


